snippet it
options word
  it('should ${1:do what}', () => {
    ${2}
  });

snippet itt
options word
  it('should ${1:do what}', inject((${2}) => {
    ${3}
  }));

snippet before
options word
  beforeEach(module('${1:app}'));

snippet beforeEach
options word
  beforeEach(inject((${1:$compile, $rootScope}) => {
    ${2}
  }));

snippet createCompiler
options word
  compile = createCompiler('<${1:directive} />', $rootScope, $compile);

snippet describe
options word
  describe('${1:what}', () => {
    ${2}
  });

snippet expect
options word
  expect(${1:one thing}).${2:toBe}(${3:another thing});

snippet compile
options word
  compile(${1:parentScopeMock}${2:, elementAttrsMock, }(${4:scope}${5:,
  element}${6:, driver}) => {
    ${7:expect}
  });

snippet component
options head
  ;(function() {
    'use strict';

    angular
      .module(${1:module})
      .component('${2:component}', {
        ${3:bindings: {\},}
        ${4:templateUrl: '',}
        ${6:controller: function() {}}
      });
  })();

snippet componentTest
options head
  'use strict';

  describe('Component: ${1:component}', function() {
    var compile;

    var parentScopeMock = {};

    var elementAttrsMock = {};

    beforeEach(module('${1:component}'));

    beforeEach(inject(function($compile, $rootScope) {
      compile = createCompiler('<${2:component} />', $rootScope, $compile);
    }));

    it('should compile successfully', function() {
      compile(parentScopeMock, elementAttrsMock, function(scope, element) {
        expect(element.find('.${2:component}').length).toBe(1);
      });
    });
  });


snippet =>
options word
  () => { ${0} }

