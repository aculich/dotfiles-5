snippet it
options word
  it('should ${1:do what}', () => {
    ${2}
  });

snippet itt
options word
  it('should ${1:do what}', inject((${2}) => {
    ${3}
  }));

snippet before
options word
  beforeEach(module('${1:app}'));

snippet beforeEach
options word
  beforeEach(inject((${1:$compile, $rootScope}) => {
    ${2}
  }));

snippet createCompiler
options word
  compile = createCompiler('<${1:directive} />', $rootScope, $compile);

snippet describe
options word
  describe('${1:what}', () => {
    ${2}
  });

snippet expect
options word
  expect(${1:one thing}).${2:toEqual}(${3:another thing});

snippet compile
options word
  compile(${1:parentScopeMock}${2:, elementAttrsMock, }(${4:scope}${5:,
  element}${6:, driver}) => {
    ${7:expect}
  });

snippet component
options head
  ;(function() {
    'use strict';

    angular
      .module(${1:module})
      .component('${2:component}', {
        ${3:bindings: {\},}
        ${4:templateUrl: '',}
        ${6:controller: function() {}}
      });
  })();

snippet componentTest
options head
  'use strict';

  describe('Component: ${1:component}', function() {
    var compile;

    var parentScopeMock = {};

    var elementAttrsMock = {};

    beforeEach(module('${1:component}'));

    beforeEach(inject(function($compile, $rootScope) {
      compile = createCompiler('<${2:component} />', $rootScope, $compile);
    }));

    it('should compile successfully', function() {
      compile(parentScopeMock, elementAttrsMock, function(scope, element) {
        expect(element.find('.${2:component}').length).toBe(1);
      });
    });
  });


snippet =>
options word
  () => {${0}}


snippet test
options word
  test('${1:thing}', t => {
    t.equal(${2:true}, ${3:true}, '${4:should work}');
    t.end();
  });


snippet testisdef
options word
  test('${1:thing}', t => {
    t.equal(typeof ${2:true}, 'function', 'should be defined');
    t.end();
  });

snippet /t
options word
  // TODO: ${0:shit}


snippet reactComponentTest
options word
  import React from 'react';
  import { expect } from 'chai';
  import { ${1:shallow} } from 'enzyme';

  import ${2:Component} from './$2';
  import styles from './styles.css';

  class Driver {
    component;
    requiredProps = {}
    when = {
      created: props => this.component = $1(<$2 {...{ ...this.requiredProps, ...props }}/>)
    }
    get = {
      root: () => this.component.find(\`.${styles.root}\`)
    }
  }

  const driver = new Driver();

snippet reactComponent
options word
  import React from 'react';
  import PropTypes from 'prop-types';

  const ${1:Component} = ({ ${2:prop} }) =>
    <div>
      ${4:Hello, World!}
    </div>;

  $1.propTypes = {
    $2: PropTypes.${3:string}.isRequired
  };

  export default $1;

snippet log
options word
  const log = (...msgs) => a => {
    console.log(...msgs, a);
    return a;
  };
